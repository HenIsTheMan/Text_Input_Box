<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_textInputBox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_set_cursor(cr_beam);
keyboardString = "";
caret = 0;
endpt = 0;
xx = 10;
yy = 10;
canEdit = 0;
state = 0;
textStore = "";
caretLine = 0;
endptLine = 0;
for(i = 0; i &lt; 10; i++){
    breakPos[i] = 999;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state++;
alarm[1] = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///do nth
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i = 0; i &lt; array_length_1d(breakPos); i++){
    if(string_copy(keyboardString,breakPos[i],1) != "#"){
        breakPos[i] = 999;
    }
}
if(keyboard_check(vk_anykey)){
    state = 1;
    keyboard_string = string_copy(keyboard_string,1,20 + string_count("\#",keyboard_string));
} else{
    alarm[0] = 15;
}

if(keyboard_check_pressed(vk_home)){
    caret = 0;
    endpt = caret;
}
if(keyboard_check_pressed(vk_end)){
    caret = string_length(keyboardString);
    endpt = caret;
}
if(caret &gt; 0 &amp;&amp; (keyboard_check_pressed(vk_left) || (keyboard_check(vk_left) &amp;&amp; alarm[0] == -1))){
    caret -= 1 + (string_copy(keyboard_string,caret - 1,2) == "\#");
    endpt = caret;
}
if(caret &lt; string_length(keyboardString) &amp;&amp; (keyboard_check_pressed(vk_right) || (keyboard_check(vk_right) &amp;&amp; alarm[0] == -1))){
    caret += 1 + (string_copy(keyboard_string,caret + 1,2) == "\#");
    endpt = caret;
}

if(mouse_check_button_pressed(mb_left)){
    if(position_meeting(mouse_x,mouse_y,self)){
        canEdit = 1;
        state = 1;
        alarm[1] = 20;
        keyboard_string = keyboardString;
    } else{
        canEdit = 0;
    }
    caret = scr_mouse();
}
if(mouse_check_button(mb_left)){
    endpt = scr_mouse();
}

if(keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("A"))){
    caret = 0;
    endpt = string_length(keyboardString);
}
if(canEdit &amp;&amp; caret != endpt &amp;&amp; keyboard_check(vk_control)){
    if(keyboard_check_pressed(ord("X"))){
        clipboard_set_text(string_copy(keyboardString,min(caret,endpt) + 1,abs(endpt - caret)));
        textStore = clipboard_get_text();
        keyboardString = string_delete(keyboardString,min(caret,endpt) + 1,abs(endpt - caret));
        keyboard_string = keyboardString;
        caret = min(caret,endpt);
        endpt = caret;
    }
    if(keyboard_check_pressed(ord("C"))){
        clipboard_set_text(string_copy(keyboardString,min(caret,endpt) + 1,abs(endpt - caret)));
        textStore = clipboard_get_text();
    }
}
if(canEdit &amp;&amp; keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("V"))){
    for(i = 0; i &lt; string_length(clipboard_get_text()); i++){
        if(string_length(keyboardString) == 20 + string_count("\#",keyboard_string)){
            break;
        }
        if(string_pos(string_copy(clipboard_get_text(),i + 1,1),'"' + "!#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~") == 0){
            continue;
        }
        if(caret != endpt){
            keyboardString = string_delete(keyboardString,min(caret,endpt) + 1,abs(endpt - caret));
            caret = min(caret,endpt);
        }
        temp = keyboardString;
        if(string_copy(clipboard_get_text(),i + 2,1) == "#" &amp;&amp; clipboard_get_text() != textStore){
            keyboardString = string_insert("\#",keyboardString,caret + 1);
            i++;
        } else{
            keyboardString = string_insert(string_copy(clipboard_get_text(),i + 1,1),keyboardString,caret + 1);
        }
        keyboard_string = keyboardString;
        caret += string_length(keyboardString) - string_length(temp);
        endpt = caret;
    }
}

if(string_length(keyboard_string) &gt; string_length(keyboardString)){
    if(caret != endpt){
        keyboard_string = string_delete(keyboard_string,min(caret,endpt) + 1,abs(endpt - caret));
        caret = min(caret,endpt);
        temp = keyboard_string;
    } else{
        temp = keyboardString;
    }
    if(string_copy(keyboard_string,string_length(keyboard_string),1) == "#"){
        keyboard_string = string_insert("\#",keyboard_string,caret + 1);
    } else{
        keyboard_string = string_insert(string_char_at(keyboard_string,string_length(keyboard_string)),keyboard_string,caret + 1);
    }
    keyboard_string = string_delete(keyboard_string,string_length(keyboard_string),1);
    caret += string_length(keyboard_string) - string_length(temp) + 1 * (temp != keyboardString);
    endpt = caret;
}
if(keyboard_check(vk_backspace) &amp;&amp; string_length(keyboard_string) &lt; string_length(keyboardString)){
    keyboard_string += string_char_at(keyboardString,string_length(keyboardString));
    if(caret != endpt){
        keyboard_string = string_delete(keyboard_string,min(caret,endpt) + 1,abs(endpt - caret));
        caret = min(caret,endpt);
    } else{
        keyboard_string = string_delete(keyboard_string,caret - (string_copy(keyboard_string,caret - 1,2) == "\#"),1 + (string_copy(keyboard_string,caret - 1,2) == "\#"));
        caret -= (caret &gt; 0) * (string_length(keyboardString) - string_length(keyboard_string));
    }
    endpt = caret;
}
if(keyboard_check_pressed(vk_delete) || (keyboard_check(vk_delete) &amp;&amp; alarm[0] == -1)){
    if(caret != endpt){
        keyboard_string = string_delete(keyboard_string,min(caret,endpt) + 1,abs(endpt - caret));
        caret = min(caret,endpt);
    } else{
        keyboard_string = string_delete(keyboard_string, caret + 1, 1 + (string_copy(keyboard_string,caret + 1,2) == "\#"));
    }
    endpt = caret;
}
if(keyboard_check_pressed(vk_enter) &amp;&amp; string_length(keyboard_string) &lt; 20 + string_count("\#",keyboard_string)){
    if(caret != endpt){
        keyboard_string = string_delete(keyboard_string,min(caret,endpt) + 1,abs(endpt - caret));
        caret = min(caret,endpt);
    }
    keyboard_string = string_insert("#",keyboard_string,caret + 1);
    caret++;
    endpt = caret;
    breakPos[string_count("#",keyboard_string) - string_count("\#",keyboard_string) - 1] = caret;
}
index = 0;
while(caret &gt;= breakPos[index]){
    index++;
}
caretLine = index;
index = 0;
while(endpt &gt;= breakPos[index]){
    index++;
}
endptLine = index;
if(canEdit &amp;&amp; keyboard_check(vk_anykey)){
    keyboardString = keyboard_string;
} else{
    keyboard_string = keyboardString;
}

if(keyboard_check_pressed(vk_escape) &amp;&amp; keyboardString != ""){
    if(room_exists(asset_get_index(string_upper(keyboardString)))){
        room_goto(asset_get_index(string_upper(keyboardString)));
    } else{
        room_goto(room_duplicate(WORLD));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_set_font(f_fancy);
draw_text(xx, yy, keyboardString);
if(canEdit){
    if(string_count("#",keyboard_string) - string_count("\#",keyboard_string) == 0 &amp;&amp; (caret != endpt || (caret == endpt &amp;&amp; state &amp; 1))){
        draw_set_alpha(1 - 0.7 * (caret != endpt));
        draw_rectangle(xx + string_width(string_copy(keyboardString,1,caret)), yy, xx + string_width(string_copy(keyboardString,1,endpt)), yy + string_height("\"), 0);
        draw_set_alpha(1);
    } else{
        draw_set_alpha(0.3);
        if(caretLine == endptLine){
            if(min(caretLine,endptLine) == 0){
                draw_rectangle(xx + string_width(string_copy(keyboardString,1,min(caret,endpt))), yy, xx + string_width(string_copy(keyboardString,1,max(caret,endpt))), yy + string_height("\"), 0);
            } else{
                draw_rectangle(xx + string_width(string_copy(keyboardString,breakPos[caretLine - 1] + 1,caret - breakPos[caretLine - 1])), yy + string_height("\") * caretLine, xx + string_width(string_copy(keyboardString,breakPos[caretLine - 1] + 1,endpt - breakPos[caretLine - 1])), yy + string_height("\") * (endptLine + 1), 0);
            }
        } else{
            if(min(caretLine,endptLine) == 0){
                draw_rectangle(xx + string_width(string_copy(keyboardString,1,min(caret,endpt))), yy, xx + string_width(string_copy(keyboardString,1,breakPos[min(caretLine,endptLine)])), yy + string_height("\"), 0);
            } else{
                draw_rectangle(xx + string_width(string_copy(keyboardString,breakPos[min(caretLine,endptLine) - 1] + 1,caret - breakPos[min(caretLine,endptLine) - 1])), yy + string_height("\") * min(caretLine,endptLine), xx + string_width(string_copy(keyboardString,breakPos[min(caretLine,endptLine) - 1] + 1,breakPos[min(caretLine,endptLine)] - breakPos[min(caretLine,endptLine) - 1])), yy + string_height("\") * (min(caretLine,endptLine) + 1), 0);
            }
            draw_rectangle(xx, yy + string_height("\") * max(caretLine,endptLine), xx + string_width(string_copy(keyboardString,breakPos[max(caretLine,endptLine) - 1] + 1,endpt - breakPos[max(caretLine,endptLine) - 1])), yy + string_height("\") * (max(caretLine,endptLine) + 1), 0);
            for(i = 0; i &lt; string_count("#",keyboard_string) - string_count("\#",keyboard_string) - 1; i++){ //??
                draw_rectangle(xx, yy + string_height("\") * (i + 1), xx + string_width(string_copy(keyboardString,breakPos[caretLine + i] + 1,breakPos[caretLine + i + 1] - breakPos[caretLine + i])), yy + string_height("\") * (i + 2), 0);
            }
        }
        draw_set_alpha(1);
    }
}
draw_text(100,200,string_length(keyboardString));
draw_text(150,200,caretLine);
draw_text(200,200,endptLine);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
